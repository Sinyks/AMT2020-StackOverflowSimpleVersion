//package ch.heigvd.amt.project.infrastructure.persistence.memory;
//
//import ch.heigvd.amt.project.domain.entity.IEntity;
//import ch.heigvd.amt.project.domain.exceptions.IntegrityConstraintViolationException;
//import ch.heigvd.amt.project.infrastructure.persistence.irepositories.IRepository;
//import ch.heigvd.amt.project.domain.entity.Id;
//
//import java.util.Collection;
//import java.util.Map;
//import java.util.Optional;
//import java.util.concurrent.ConcurrentHashMap;
//import java.util.stream.Collectors;
//
//public abstract class InMemoryRepository<ENTITY extends IEntity<ENTITY, ID>, ID extends Id> implements IRepository<ENTITY, ID> {
//
//    private Map<ID, ENTITY> store = new ConcurrentHashMap<>(); // used to be our old fakeDataBase, is now a store and a concurrentHashMap
//
//
//    @Override
//    public int hashCode() {
//        return super.hashCode(); //auto generated by intellij
//    }
//
//    @Override
//    public boolean equals(Object obj) {
//        return super.equals(obj); //auto generated by intellij
//    }
//
//    @Override
//    protected Object clone() throws CloneNotSupportedException {
//        return super.clone(); //auto generated by intellij
//    }
//
//    @Override
//    public String toString() {
//        return super.toString(); //auto generated by intellij
//    }
//
//    @Override
//    public void save(ENTITY entity) throws IntegrityConstraintViolationException {
//        entity.getId();
//        store.put(entity.getId(), entity);
//    }
//
//    @Override
//    public void remove(ID id) {
//        store.remove(id);
//    }
//
//    @Override
//    public Optional<ENTITY> findById(ID id) {
//        ENTITY existingEntity = store.get(id);
//        if (existingEntity == null) {
//            return Optional.empty();
//        }
//        ENTITY clonedEntity = existingEntity.deepClone();
//        return Optional.of(clonedEntity);
//    }
//
//    @Override
//    public Collection<ENTITY> findAll() {
//        return store.values().stream().map(entity -> entity.deepClone()).collect(Collectors.toList());
//    }
//}
